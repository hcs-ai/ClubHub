{"ast":null,"code":"var _jsxFileName = \"/Users/joshuazyzak/ClubHub/src/Components/DataTable.js\";\nimport React, { useEffect, useState } from 'react';\nimport Papa from 'papaparse'; //Parsing csv\n\nconst DataTable = () => {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      //Loading in the data.csv file \n      const response = await fetch('/data.csv');\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder('utf-8');\n      const {\n        value\n      } = await reader.read();\n      const csv = decoder.decode(value);\n\n      // Here, we parse CSV data\n      Papa.parse(csv, {\n        header: true,\n        skipEmptyLines: true,\n        // Ignore empty rows\n        complete: results => {\n          setData(results.data); // Save parsed data to state\n        }\n      });\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"table\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, \"ID\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"Age\"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, \"Location\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, data.map(item => /*#__PURE__*/React.createElement(\"tr\", {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, item.id), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }, item.name), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, item.age), /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, item.location)))));\n};\nexport default DataTable;","map":{"version":3,"names":["React","useEffect","useState","Papa","DataTable","data","setData","fetchData","response","fetch","reader","body","getReader","decoder","TextDecoder","value","read","csv","decode","parse","header","skipEmptyLines","complete","results","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","item","key","id","name","age","location"],"sources":["/Users/joshuazyzak/ClubHub/src/Components/DataTable.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Papa from 'papaparse'; //Parsing csv\n\nconst DataTable = () => {\n    const [data, setData] = useState([]);\n  \n    useEffect(() => {\n      const fetchData = async () => {\n        //Loading in the data.csv file \n        const response = await fetch('/data.csv');\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder('utf-8');\n        const { value } = await reader.read();\n        const csv = decoder.decode(value);\n        \n        // Here, we parse CSV data\n        Papa.parse(csv, {\n          header: true,     \n          skipEmptyLines: true, // Ignore empty rows\n          complete: (results) => {\n            setData(results.data); // Save parsed data to state\n          },\n        });\n      };\n  \n      fetchData();\n    }, []);\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th>Age</th>\n          <th>Location</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((item) => (\n          <tr key={item.id}>\n            <td>{item.id}</td>\n            <td>{item.name}</td>\n            <td>{item.age}</td>\n            <td>{item.location}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DataTable;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}